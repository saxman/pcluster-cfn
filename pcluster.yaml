AWSTemplateFormatVersion: 2010-09-09

Metadata:
  License: Apache-2.0

Description: 'An AWS solution that creates an HPC cluster using ParallelCluster, with associated network.
This solution creates a VPC with private and public subnets, which contain the cluter head
node and compute nodes, respectively. If you wish to delete this stack, you must delete the paralleccluster
stack, as the paralleccluster stack uses the network configuration created by this stack.'

Parameters:
  KeyName:
    Description : Please provice an EC2 Key Pair to enable SSH access to the cluster head node
    Type : AWS::EC2::KeyPair::KeyName
    MinLength: 1
    ConstraintDescription: must be a reference to an existing EC2 key pair in this account.

  VpcCIDR:
    Description: The IP range (CIDR notation) for the cluster's VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.0.0/23
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnetCIDR:
    Description: The IP range (CIDR notation) for the public subnet that will host the cluster head node
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.0.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PrivateSubnetCIDR:
    Description: The IP range (CIDR notation) for the private subnet that will hosting the cluster compute nodes
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.1.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  ClusterName:
    Description: A name for the cluster, which will be used for labeling the custer within you AWS account
    Type: String
    MinLength: 1
    Default: my-cluster
    ConstraintDescription: must be a non-empty string.

  LatestAmiId:
    Description: A reference to the latest AWS EC2 Linux macine image (likely doesn't need to be changed)
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: t2.micro
      IamInstanceProfile: !Ref RootInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName} Deployment Instance
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

              pip3 install aws-parallelcluster --upgrade

              cd ~

              cat <<EOT >> pcluster.conf
              [aws]
              aws_region_name = ${Region}

              [aliases]
              ssh = ssh {CFN_USER}@{MASTER_IP} {ARGS}

              [global]
              cluster_template = default
              update_check = true
              sanity_check = true

              [cluster default]
              key_name = ${KeyName}
              scheduler = awsbatch
              master_instance_type = t2.micro
              base_os = alinux2
              vpc_settings = default
              compute_instance_type = optimal
              desired_vcpus = 0

              [vpc default]
              vpc_id = ${VpcId}
              master_subnet_id = ${PublicSubnetId}
              compute_subnet_id = ${PrivateSubnetId}
              use_public_ips = false
              EOT

              pcluster create ${ClusterName} -c pcluster.conf

              shutdown now
            - Region: !Ref AWS::Region
              KeyName: !Ref KeyName
              VpcId: !Ref VPC
              PublicSubnetId: !Ref PublicSubnet
              PrivateSubnetId: !Ref PrivateSubnet
              ClusterName: !Ref ClusterName

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName} Public Subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName} Private Subnet

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName} NAT Gateway EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName} Public Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${ClusterName} Private Route Table

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  RootEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RootEC2InstanceRole
